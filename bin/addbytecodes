#!/usr/bin/env python

#
# addbytecodes
# by stephen kyle
#
# This assumes you have a apk_contents/smali directory that it can 
# apply the provided .ind file to, in the current directory!

import argparse

class Injection:
	def __init__(self, idx, filename, method, offset):
		self.idx = idx
		self.filename = filename
		self.method = method
		self.offset = offset

files = {}

def applyInjectionsToFile(filename, injections):
	# Read the file
	f = open("apk_contents/smali/" + filename, "r")
	lines = []
	for line in f.readlines():
		lines.append(line)
	f.close()

	# Apply each injection to this file
	for injection in injections:
		# Find method
		index = 0
		foundMethod = False
		while not foundMethod:
			if (lines[index].startswith(".method") and lines[index].endswith(injection.method + "\n")):
				foundMethod = True
			index += 1

		# Find offset
		foundOffset = False
		while not foundOffset:
			if (lines[index].startswith("    #@" + injection.offset + "\n")):
				foundOffset = True
			index += 1

		# Skip any .directives or :labels
		line = lines[index+1]
		while (line.startswith("    .") or line.startswith("    :")):
			index += 1
			line = lines[index]

		# Insert the itrace-inject bytecode
		lines.insert(index, "    itrace-inject v%s\n" % (injection.idx, ))
		lines.insert(index+1, "\n")

	# Write back the new file
	f = open("apk_contents/smali/" + filename, "w")
	for line in lines:
		f.write(line)
	f.close()

def loadFile(filename):
	f = open(filename, "r")
	for line in f.readlines():
		line = line.lstrip().strip()
		vals = line.split()
		vals[1] = vals[1].split(';')
		vals[1] = [vals[1][0][1:] + '.smali', vals[1][1] + vals[1][2]]
		inj = Injection(vals[0], vals[1][0], vals[1][1], vals[2])
		if inj.filename not in files:
			files[inj.filename] = [inj]
		else:
			files[inj.filename].append(inj)
	f.close()

parser = argparse.ArgumentParser(description='Apply an injection description file to your APK.')
parser.add_argument('-i', help='Input file', dest='inputFile', type=str, required=True)
args = parser.parse_args()

loadFile(args.inputFile)
for (filename, injections) in files.items():
	applyInjectionsToFile(filename, injections)
